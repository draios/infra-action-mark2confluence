name: "Test Action on PR"
on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

jobs:
  test-action:
    name: "Test mark2confluence Action"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: mark2confluence:pr-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Create test markdown files
        run: |
          mkdir -p test-docs

          # Create a test markdown file with Confluence headers
          cat > test-docs/test-page.md << 'EOF'
          <!-- Space: TEST -->
          <!-- Parent: Documentation -->
          <!-- Title: Test Page -->

          # Test Page

          This is a test page for the mark2confluence action.

          ## Features

          - Markdown to Confluence conversion
          - Header injection
          - Parent page management

          ```mermaid
          graph TD
              A[Start] --> B[Process Markdown]
              B --> C[Inject Headers]
              C --> D[Publish to Confluence]
          ```
          EOF

          # Create another test file
          cat > test-docs/another-page.md << 'EOF'
          <!-- Space: TEST -->
          <!-- Parent: Documentation -->
          <!-- Title: Another Test Page -->

          # Another Test Page

          This is another test page.

          ## Code Example

          ```python
          def hello_world():
              print("Hello, Confluence!")
          ```
          EOF

      - name: Test action with dry-run
        id: dry-run-test
        run: |
          echo "Testing action with dry-run mode..."

          # Test the action with dry-run
          docker run --rm \
            -e INPUT_ACTION=dry-run \
            -e INPUT_DOC_DIR=test-docs \
            -e INPUT_DOC_DIR_PATTERN=".*\\.md$" \
            -e INPUT_HEADER_TEMPLATE="---\n\n**Generated from**: {{ source_link }}\n\n---\n" \
            -e INPUT_MARK_LOG_LEVEL=DEBUG \
            -e GITHUB_WORKSPACE=/workspace \
            -e GITHUB_REPOSITORY=test/mark2confluence \
            -e GITHUB_REF_NAME=main \
            -e GITHUB_SERVER_URL=https://github.com \
            -v $(pwd):/workspace \
            mark2confluence:pr-test /workspace/mark2confluence/main.py

          echo "✅ Dry-run test completed successfully"

      - name: Test action with specific files
        id: files-test
        run: |
          echo "Testing action with specific files..."

          # Test with specific files
          docker run --rm \
            -e INPUT_ACTION=dry-run \
            -e INPUT_FILES="test-docs/test-page.md test-docs/another-page.md" \
            -e INPUT_HEADER_TEMPLATE="---\n\n**Generated from**: {{ source_link }}\n\n---\n" \
            -e GITHUB_WORKSPACE=/workspace \
            -e GITHUB_REPOSITORY=test/mark2confluence \
            -e GITHUB_REF_NAME=main \
            -e GITHUB_SERVER_URL=https://github.com \
            -v $(pwd):/workspace \
            mark2confluence:pr-test /workspace/mark2confluence/main.py

          echo "✅ Specific files test completed successfully"

      - name: Test action with parent configuration
        id: parent-test
        run: |
          echo "Testing action with parent configuration..."

          # Test with default parents configuration
          docker run --rm \
            -e INPUT_ACTION=dry-run \
            -e INPUT_DOC_DIR=test-docs \
            -e INPUT_DOC_DIR_PATTERN=".*\\.md$" \
            -e INPUT_DEFAULT_PARENTS="test-docs/=TEST->Documentation" \
            -e INPUT_HEADER_TEMPLATE="---\n\n**Generated from**: {{ source_link }}\n\n---\n" \
            -e GITHUB_WORKSPACE=/workspace \
            -e GITHUB_REPOSITORY=test/mark2confluence \
            -e GITHUB_REF_NAME=main \
            -e GITHUB_SERVER_URL=https://github.com \
            -v $(pwd):/workspace \
            mark2confluence:pr-test /workspace/mark2confluence/main.py

          echo "✅ Parent configuration test completed successfully"

      - name: Test action error handling
        id: error-test
        run: |
          echo "Testing action error handling..."

          # Test with invalid configuration (should handle gracefully)
          docker run --rm \
            -e INPUT_ACTION=dry-run \
            -e INPUT_DOC_DIR=non-existent-dir \
            -e INPUT_DOC_DIR_PATTERN=".*\\.md$" \
            -e GITHUB_WORKSPACE=/workspace \
            -e GITHUB_REPOSITORY=test/mark2confluence \
            -e GITHUB_REF_NAME=main \
            -e GITHUB_SERVER_URL=https://github.com \
            -v $(pwd):/workspace \
            mark2confluence:pr-test /workspace/mark2confluence/main.py || echo "✅ Error handling test completed (expected no files found)"

      - name: Comment on PR
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            const comment = `✅ **Action Test Passed**

            The mark2confluence action has been successfully tested with various scenarios:

            - ✅ Docker image built successfully
            - ✅ Dry-run mode with directory scanning
            - ✅ Specific files processing
            - ✅ Parent page configuration
            - ✅ Error handling

            The action is ready for use in other repositories!`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on PR (Failure)
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const comment = `❌ **Action Test Failed**

            The mark2confluence action failed during testing. Please check the build logs for details.

            Common issues to check:
            - Docker build failures
            - Python import errors
            - Configuration issues
            - File processing errors

            Please fix the issues before merging.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
